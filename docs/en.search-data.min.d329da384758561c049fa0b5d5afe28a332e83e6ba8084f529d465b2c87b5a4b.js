'use strict';(function(){const indexCfg={cache:true};indexCfg.doc={id:'id',field:['title','content'],store:['title','href','section'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':0,'href':'/ultimate-go-notebook/docs/introduction/','title':"Introduction",'section':"Docs",'content':"Chapter 1: 简介 基于面向数据设计的原型驱动开发！\n请对接下来的我准备进行回忆的内容做好准备。本章要分享给读者的是，最早使我理解这门语言、了解它的本质和总体设计哲学的一些想法。这些想法是以一组知识点的形式记录下来的，读起来不会像在其他章节看到的那么流利。\n开发之路上的一些时刻\n 我们被写有大量冗长的代码的程序所震惊 我们努力对代码库进行大量抽象 我们忘了设计是基于原有的硬件平台的 我们丢失了对原先来之不易的决策的理解  这些日子一去不复返\n 我们不能为一个问题投入更多的硬件 我们不能为一个问题投入更多的程序员  敞开心扉\n 科技发展得很快但是人们的想法改变得很慢 新科技很容易被接受但是新的思考方式则很难  有趣的问题 - 它们对我意味着什么？\n 这是个好的程序吗？ 这是个高效的程序吗？ 这是个正确的程序吗？ 这个程序按时交付了吗？ 开发这个程序投入了多少？  向往\n 在质量、效率和简洁上追求极致 有自己的看法 价值内省和自我回顾  "});index.add({'id':1,'href':'/ultimate-go-notebook/docs/introduction/legacy_software/','title':"Legacy Software",'section':"Introduction",'content':"1.2 遗留项目 我会关心我留下的老项目吗？\n引用他人的话\n “只有两类软件项目：已经失败的，和变成可怕的遗留项目的。” - Peter Weinberger （AWK的创造者） “遗留项目是个不受欢迎但是很严峻的问题。遗留的代码可能是我们文明衰落的原因” - Chuck Moore（Forth的创造者） “不管是新手还是经验丰富的程序员，很少有人能反对以下假设：大多数程序在它们的一生中要被修改。那我们为什么又很难找到一个证明程序在设计上有准备好后续一连串修改的证据呢？” - Gerald M. Weinberg “我们认为可怕的代码是可怕的开发写的。然而事实上，它是被合理的开发基于可怕的情景中写的。” - Sarah Mei “有很多原因让程序以它们现在这种方式编写出来，我们可能无看出多种多样的原因，因为我们通常是从外部评判代码，而不是真正阅读它。当我们真正阅读的时候，我们会发现这样写是因为机器限制、语言限制、程序员的限制，以及因为历史事故，还有规范要求——重要的和无关紧要的都有。” - Gerald M. Weinberg  "});index.add({'id':2,'href':'/ultimate-go-notebook/docs/introduction/reading_code/','title':"Reading Code",'section':"Introduction",'content':"1.1 代码阅读 Go 是一门以可读性为首要设计原则的语言。\n引用他人的话\n “如果一些程序员缺少理解和认知，那他们作出的选择也会一样缺少这些东西。” - Alan Kay “软件行业是少有的先教会写代码，再教会读代码的行业之一” - Tom Love（Object C的创造者） “代码被阅读到的次数远大与它被写下的次数” - Dave Cheney “抛开别的不说，编程其实就是写作。学习写作的方式之一就是去写作，但是别的写作中，人们还要去阅读。大家通过学习好和不好的例子来提升。然而有多少程序员通过读代码来学会写代码的？” - Gerald M. Weinberg “技巧是在你产出（produce）中得到提升的，而不是在读成品代码（consume）的过程中。” - Katrina Owen  "});})();