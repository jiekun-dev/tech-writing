'use strict';(function(){const indexCfg={cache:true};indexCfg.doc={id:'id',field:['title','content'],store:['title','href','section'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':0,'href':'/tech-writing/docs/one/words/','title':"Words",'section':"One",'content':"1.1 遣词造句 #  我们对文档进行了大量研究，结论就是，要写出好的句子，主要看如何使用词汇。\n1.1.1 给出新词条的定义 #  写作或者编辑的时候，学会识别出哪些词条对于你的部分或全部读者来说会不熟悉。若存在这样的词条，可以采取以下两种策略：\n 如果词条已经存在，链接至一个已有的、正确的解释。（不重复造轮子。） 如果你的文档要详细介绍这个词条，那么给出它的定义。如果你的文档要介绍多个词条，把它们的定义放到一个术语表中。  1.1.2 对词条的使用要一致 #  如果你在方法中换用不同的变量名代表同一个内容，你的代码无法完成编译。类似地，如果你在文档中突然换用另一个词条名，你的想法也没办法在读者脑海中编译成功。\n规范就是：在整篇文档中都使用一致的、含义清晰的词或词条（来指代同一个事物）。你如果称了它为这东西（thingy），就不要再改称为这样物品（thingamabob）。比如，以下的示例段落错误地将 Protocol Buffers 改称为 protobufs：\n Protocol Buffers 提供了它自己的定义语言。Blah，blah，blah。这就是为什么 protobufs 能有这么大的市场。\n 如你所见，技术写作似乎很难，很多表达受限，但是它也提供了一些灵活变通的方法，即，当引入一个很长的概念术语或者产品名称的时候，你可以明确定义它的缩写。其后，你就可以在整篇文档中使用该缩写。举个例子，以下段落就没出现之前的错误：\n Protocol Buffers（以下简称 protobufs） 提供了它自己的定义语言。Blah，blah，blah。这就是为什么 protobufs 能有这么大的市场。\n 1.1.3 正确使用首字母缩写 #  在文档或小节内，首次使用某个不熟悉的缩写词时，先将完整的词拼写出来，然后将它的缩写放在括号内。将完整拼写和首字母缩写都加粗表示。示例如下：\n 该文档是面向不熟悉 Telekinetic Tactile Network（TTN）以及想要了解如何通过手部动作操纵 TTN 零件的工程师。\n 你可以在给出定义之后继续使用缩写，像以下例子一样：\n 如果没有缓存的条目存在，Mixer 调用 OttoGroup Server（OGS）从请求中获取 Ottos。OGS 是一个持有所有可供服务的 Ottos 的仓库。OGS 是以 1 个根节点和 2 层叶子节点的逻辑树的结构来组织的。OGS 的根节点转发请求至叶子节点，并收集它们的响应。\n 不要在同一个文档中来回切换着使用完整词条和首字母缩写。\n1.1.3.1 使用首字母缩写还是完整词条？ #  尽管你已经可以正确地引入和使用缩写，但是真的应该用它呢？通常首字母缩写可以缩短句子长度。比如，TTN 就比 Telekinetic Tactile Network 短两个词。但是，缩写词只是一个抽象层；读者心里需要将刚刚学到的缩写词展开成完整词条。例如，读者在脑海中将 TTN 展开成 Telekinetic Tactile Network，因此，相比起完整词条，更为简短的缩写词实际上需要更长的时间去理解和处理。\n被频繁使用的缩写词会演变出它自己的特征。在出现了一定的次数后，读者就可以不再将其展开。比如很多 Web 工程师就已经忘记 HTML 的全称。\n以下是使用首字母缩写的准则：\n 不要为仅使用寥寥几次的词定义一个缩写词。 为同时满足以下规则的词定义缩写词：  缩写词显著短于完整词条。 缩写词要在文档中出现多次。    1.1.3.2 随堂练习 #  请修改以下段落。假设这个段落是 MapReduce 在全文中首次出现之处，且 MR 是它最合适的首字母缩写。\n Jeff Dean 在 1693 年发明了 MapReduce，在由沙滩上的沙子、蜡纸、羽毛笔和烤箱为原料制造的硅基电脑上实现了它的算法。这个版本的 MR 直到 2014 年以前都一直保持着性能方面的多项世界纪录。\n （以上段落只为了幽默表达，并不属实。）\n点击本链接查看原答案。\n1.1.4 消灭有歧义的代词 #  很多代词指代前文引入的名词。这些代词就像编程中的指针。跟指针类似，代词可能会引入错误指代。不正确地使用代词会在读者脑海中产生错误的等价认知或空指针异常。在很多情况下，你应该避免使用代词，直接复述原先的名词。但是，有时使用代词的带来好处也会超过它的坏处（比如在本句中）。\n考虑以下的代词使用准则：\n 仅在引入了特定名词之后使用代词；永远不要在引入前使用代词。 将代词放在离指代对象尽可能近的位置。通常来说，如果你的名词和代词间隔超过 5 个词汇，可以考虑再重复一次名词，而非使用代词。 如果你在名词和代词之间还引入了别的名词，那就复用之前的名词，而不要使用代词。  1.1.4.1 它（It）和它们（They） #  以下的代词在技术文档中最常引起混淆：\n 它（it） 它们（they，them 和 their）  例如，在下面的句子中，它 指代的是 Python 还是 C++？\n Python 是解释型语言，而 C++ 是编译型语言。它 有着近乎狂热的追随者。\n 另一个例子，它们 指代的是什么？\n 使用 Frambus ，或搭配 HoobyScooby 使用 Carambola，或使用 BoiseFram 的时候要当心，因为 它们 核心中的 bug 可能导致意料之外的大范围好友关系解除。\n 1.1.4.2 这（This）和那（That） #  再看另外两个容易出问题的代词：\n 这（this） 那（that）  例如，下面这句模棱两可的句子，这 可以指代用户 ID 或执行处理，或同时指代两者：\n 执行处理会配置权限并生成一个用户 ID。这 让用户能被应用成功认证。\n 为了方便读者，请避免在指代不清晰的情况下使用 这 或 那。用以下的策略之一来消灭这 和 那：\n 将 这 或 那 替换成恰当的名词。 将一个名词紧贴 这 或 那 之后放置。  如下示范对第二个例句进行重写，必要时替换或者添加明确的词条：\n 这个用户 ID 让用户得以被成功认证。 配置权限的过程让用户得以被成功认证。 权限和用户 ID 两者让用户得以被成功认证。\n 1.1.4.3 随堂练习 #  辨别出以下段落中，模棱两可的代词所有可能的指代对象：\n Aparna 和 Phil 与 Maysam 和 Karan 共同分担责任，他们将轮候下次 on call。 你可以通过配置文件或在运行时动态地引入 Carambola 数据。这可能是个安全隐患。  点击本链接查看原答案。\n"});index.add({'id':1,'href':'/tech-writing/docs/overview/','title':"Overview",'section':"Docs",'content':"课程总览 #  以下表格归纳了技术写作课程的内容：\n   Title Summary Pre-Class In-Class     Chapter 1: 技术文档 了解技术写作的关键基础。进入其他课程之前先学习这一课。 2 小时 2 - 2.5 小时   Chapter 2: 技术沟通技巧 技术写作中4个中级目标的实践。 1 小时 2 - 2.5 小时    课前部分介绍了不同的学习目标；课内部分帮助读者深入和进行实践。也就是说，课前部分本身即具有一定的学习价值。\nGoogle 提供了在公司或组织进行课内学习需要的所有材料。若希望在了解如何在公司或组织进行课程指导，请查看指导技术写作课程。\n 备注：Google 偶尔会对公众提供免费的课内学习场次。详见公告。\n 技术写作课程 Chapter 1 与 Chapter 2 的目标读者为：\n 软件工程师 软件工程或计算机科学的学生  另外，许多与软件工程师打交道（如产品经理）的读者也可以从这些课程中受益。\n"});})();